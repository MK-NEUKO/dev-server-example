// <auto-generated />
using System;
using System.Collections.Generic;
using EnvironmentGateway.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EnvironmentGateway.Infrastructure.Migrations
{
    [DbContext(typeof(EnvironmentGatewayDbContext))]
    [Migration("20250326095944_Create_Database")]
    partial class Create_Database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EnvironmentGateway.Domain.GatewayConfig.Cluster.Cluster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClusterName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("cluster_name");

                    b.Property<Guid>("GatewayConfigId")
                        .HasColumnType("uuid")
                        .HasColumnName("gateway_config_id");

                    b.HasKey("Id")
                        .HasName("pk_clusters");

                    b.HasIndex("GatewayConfigId")
                        .HasDatabaseName("ix_clusters_gateway_config_id");

                    b.ToTable("clusters", (string)null);
                });

            modelBuilder.Entity("EnvironmentGateway.Domain.GatewayConfig.Cluster.Destination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClusterId")
                        .HasColumnType("uuid")
                        .HasColumnName("cluster_id");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "EnvironmentGateway.Domain.GatewayConfig.Cluster.Destination.Address#Url", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_value");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("DestinationName", "EnvironmentGateway.Domain.GatewayConfig.Cluster.Destination.DestinationName#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("destination_name_value");
                        });

                    b.HasKey("Id")
                        .HasName("pk_destinations");

                    b.HasIndex("ClusterId")
                        .HasDatabaseName("ix_destinations_cluster_id");

                    b.ToTable("destinations", (string)null);
                });

            modelBuilder.Entity("EnvironmentGateway.Domain.GatewayConfig.GatewayConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_gateway_configurations");

                    b.ToTable("gateway-configurations", (string)null);
                });

            modelBuilder.Entity("EnvironmentGateway.Domain.GatewayConfig.Route.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("GatewayConfigId")
                        .HasColumnType("uuid")
                        .HasColumnName("gateway_config_id");

                    b.ComplexProperty<Dictionary<string, object>>("ClusterName", "EnvironmentGateway.Domain.GatewayConfig.Route.Route.ClusterName#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("cluster_name_value");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Match", "EnvironmentGateway.Domain.GatewayConfig.Route.Route.Match#RouteMatch", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("match_path");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("RouteName", "EnvironmentGateway.Domain.GatewayConfig.Route.Route.RouteName#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("route_name_value");
                        });

                    b.HasKey("Id")
                        .HasName("pk_routs");

                    b.HasIndex("GatewayConfigId")
                        .HasDatabaseName("ix_routs_gateway_config_id");

                    b.ToTable("Routs", (string)null);
                });

            modelBuilder.Entity("EnvironmentGateway.Domain.GatewayConfig.Cluster.Cluster", b =>
                {
                    b.HasOne("EnvironmentGateway.Domain.GatewayConfig.GatewayConfig", null)
                        .WithMany("Clusters")
                        .HasForeignKey("GatewayConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clusters_gateway_config_gateway_config_id");
                });

            modelBuilder.Entity("EnvironmentGateway.Domain.GatewayConfig.Cluster.Destination", b =>
                {
                    b.HasOne("EnvironmentGateway.Domain.GatewayConfig.Cluster.Cluster", null)
                        .WithMany("Destinations")
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_destinations_clusters_cluster_id");
                });

            modelBuilder.Entity("EnvironmentGateway.Domain.GatewayConfig.Route.Route", b =>
                {
                    b.HasOne("EnvironmentGateway.Domain.GatewayConfig.GatewayConfig", null)
                        .WithMany("Routes")
                        .HasForeignKey("GatewayConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routs_gateway_configurations_gateway_config_id");
                });

            modelBuilder.Entity("EnvironmentGateway.Domain.GatewayConfig.Cluster.Cluster", b =>
                {
                    b.Navigation("Destinations");
                });

            modelBuilder.Entity("EnvironmentGateway.Domain.GatewayConfig.GatewayConfig", b =>
                {
                    b.Navigation("Clusters");

                    b.Navigation("Routes");
                });
#pragma warning restore 612, 618
        }
    }
}
