// <auto-generated />
using System;
using System.Collections.Generic;
using EnvironmentGateway.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace environmentgateway.infrastructure.Migrations
{
    [DbContext(typeof(EnvironmentGatewayDbContext))]
    [Migration("20250811081510_UpdateTransforms")]
    partial class UpdateTransforms
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EnvironmentGateway.Domain.Clusters.Cluster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("GatewayConfigId")
                        .HasColumnType("uuid")
                        .HasColumnName("gateway_config_id");

                    b.ComplexProperty<Dictionary<string, object>>("ClusterName", "EnvironmentGateway.Domain.Clusters.Cluster.ClusterName#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("cluster_name_value");
                        });

                    b.HasKey("Id")
                        .HasName("pk_clusters");

                    b.HasIndex("GatewayConfigId")
                        .HasDatabaseName("ix_clusters_gateway_config_id");

                    b.ToTable("clusters", (string)null);
                });

            modelBuilder.Entity("EnvironmentGateway.Domain.GatewayConfigs.GatewayConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsCurrentConfig")
                        .HasColumnType("boolean")
                        .HasColumnName("is_current_config");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "EnvironmentGateway.Domain.GatewayConfigs.GatewayConfig.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name_value");
                        });

                    b.HasKey("Id")
                        .HasName("pk_gateway_configs");

                    b.ToTable("gateway_configs", (string)null);
                });

            modelBuilder.Entity("EnvironmentGateway.Domain.RouteMatches.RouteMatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.ComplexProperty<Dictionary<string, object>>("Path", "EnvironmentGateway.Domain.RouteMatches.RouteMatch.Path#Path", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path_value");
                        });

                    b.HasKey("Id")
                        .HasName("pk_route_matches");

                    b.HasIndex("RouteId")
                        .IsUnique()
                        .HasDatabaseName("ix_route_matches_route_id");

                    b.ToTable("route_matches", (string)null);
                });

            modelBuilder.Entity("EnvironmentGateway.Domain.Routes.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("GatewayConfigId")
                        .HasColumnType("uuid")
                        .HasColumnName("gateway_config_id");

                    b.ComplexProperty<Dictionary<string, object>>("ClusterName", "EnvironmentGateway.Domain.Routes.Route.ClusterName#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("cluster_name_value");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("RouteName", "EnvironmentGateway.Domain.Routes.Route.RouteName#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("route_name_value");
                        });

                    b.HasKey("Id")
                        .HasName("pk_routes");

                    b.HasIndex("GatewayConfigId")
                        .HasDatabaseName("ix_routes_gateway_config_id");

                    b.ToTable("routes", (string)null);
                });

            modelBuilder.Entity("EnvironmentGateway.Domain.Routes.Transforms.RouteTransforms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.HasKey("Id")
                        .HasName("pk_route_transforms");

                    b.HasIndex("RouteId")
                        .IsUnique()
                        .HasDatabaseName("ix_route_transforms_route_id");

                    b.ToTable("route_transforms", (string)null);
                });

            modelBuilder.Entity("EnvironmentGateway.Domain.Clusters.Cluster", b =>
                {
                    b.HasOne("EnvironmentGateway.Domain.GatewayConfigs.GatewayConfig", "GatewayConfig")
                        .WithMany("Clusters")
                        .HasForeignKey("GatewayConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clusters_gateway_configs_gateway_config_id");

                    b.OwnsMany("EnvironmentGateway.Domain.Destinations.Destination", "Destinations", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("address");

                            b1.Property<Guid>("ClusterId")
                                .HasColumnType("uuid")
                                .HasColumnName("cluster_id");

                            b1.Property<string>("DestinationName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("destination_name");

                            b1.HasKey("Id")
                                .HasName("pk_destinations");

                            b1.HasIndex("ClusterId")
                                .HasDatabaseName("ix_destinations_cluster_id");

                            b1.HasIndex("DestinationName")
                                .IsUnique()
                                .HasDatabaseName("ix_destinations_destination_name");

                            b1.ToTable("destinations", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClusterId")
                                .HasConstraintName("fk_destinations_clusters_cluster_id");
                        });

                    b.Navigation("Destinations");

                    b.Navigation("GatewayConfig");
                });

            modelBuilder.Entity("EnvironmentGateway.Domain.RouteMatches.RouteMatch", b =>
                {
                    b.HasOne("EnvironmentGateway.Domain.Routes.Route", "Route")
                        .WithOne("Match")
                        .HasForeignKey("EnvironmentGateway.Domain.RouteMatches.RouteMatch", "RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_route_matches_routes_route_id");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("EnvironmentGateway.Domain.Routes.Route", b =>
                {
                    b.HasOne("EnvironmentGateway.Domain.GatewayConfigs.GatewayConfig", "GatewayConfig")
                        .WithMany("Routes")
                        .HasForeignKey("GatewayConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routes_gateway_configs_gateway_config_id");

                    b.Navigation("GatewayConfig");
                });

            modelBuilder.Entity("EnvironmentGateway.Domain.Routes.Transforms.RouteTransforms", b =>
                {
                    b.HasOne("EnvironmentGateway.Domain.Routes.Route", "Route")
                        .WithOne("Transforms")
                        .HasForeignKey("EnvironmentGateway.Domain.Routes.Transforms.RouteTransforms", "RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_route_transforms_routes_route_id");

                    b.OwnsMany("EnvironmentGateway.Domain.Routes.Transforms.Transform", "Transforms", b1 =>
                        {
                            b1.Property<Guid>("RouteTransformsId")
                                .HasColumnType("uuid")
                                .HasColumnName("route_transforms_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("key");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("value");

                            b1.HasKey("RouteTransformsId", "Id")
                                .HasName("pk_route_transform_items");

                            b1.ToTable("route_transform_items", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("RouteTransformsId")
                                .HasConstraintName("fk_route_transform_items_route_transforms_route_transforms_id");
                        });

                    b.Navigation("Route");

                    b.Navigation("Transforms");
                });

            modelBuilder.Entity("EnvironmentGateway.Domain.GatewayConfigs.GatewayConfig", b =>
                {
                    b.Navigation("Clusters");

                    b.Navigation("Routes");
                });

            modelBuilder.Entity("EnvironmentGateway.Domain.Routes.Route", b =>
                {
                    b.Navigation("Match");

                    b.Navigation("Transforms")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
